var Web3 = require('web3');

const address = '0x612fb91090c8919a7f55c5728e1b061e287ba92f';

web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8845'));

const abi = [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "isMember",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "memberId",
          "type": "uint8"
        }
      ],
      "name": "MembershipStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FundsDonated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TokensDonated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "setMembershipStatus",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "heartbeat",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_memberId",
          "type": "uint8"
        },
        {
          "name": "_memberName",
          "type": "bytes32"
        },
        {
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "revokeAndSetNewMember",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "proclaimAllInactive",
      "outputs": [
        {
          "name": "complete",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "inactivateSelf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "revokeAllVulnerable",
      "outputs": [
        {
          "name": "complete",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "revokeSelf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "donateFunds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenContractAddress",
          "type": "address"
        }
      ],
      "name": "donateTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "donationAddress",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ]

// CHANGE CONTRACT AND SWAP IN NEW theCyber ADDRESS BEFORE SETTING NEW BYTECODE
const bytecode = ""

const theCyberMemberUtilities = new web3.eth.Contract(abi);

theCyberMemberUtilities.deploy({
    data: bytecode
})
.send({
    from: address,
    gas: 7777777,
    gasPrice: '1000616765'
}, function(error, transactionHash){})
.on('error', function(error){ console.log(error) })
.on('transactionHash', function(transactionHash){ console.log(transactionHash) })
.on('receipt', function(receipt){
   console.log(receipt.contractAddress) // contains the new contract address
   console.log(receipt.events)
})
.on('confirmation', function(confirmationNumber, receipt){ console.log(confirmationNumber) })
.then(function(newContractInstance){
    console.log(newContractInstance.options.address) // instance with the new contract address
}).then(() => {
  process.exit()
})
